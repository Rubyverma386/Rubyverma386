#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 // Account structure for Linked List and BST
 typedef struct Account {
 int accNo;
 char name[50];
 f
 loat balance;
 struct Account *left, *right;  // BST
 struct Account *next;          // Linked List
 } Account;
 // Queue structure
 typedef struct QueueNode {
 int accNo;
 struct QueueNode *next;
 } QueueNode;
 typedef struct {
 QueueNode *front, *rear;
 } Queue;
 // Function prototypes
 Account* addAccount(Account* listHead, Account** bstRoot);
 Account* insertBST(Account* root, Account* newAcc);
 Account* searchBST(Account* root, int accNo);
 void displayInOrder(Account* root);
 void enqueue(Queue *q, int accNo);
 void dequeue(Queue *q);
 void displayQueue(Queue q);
 void deposit(Account* root, int accNo, float amount);
 void withdraw(Account* root, int accNo, float amount);
 // --- Queue Functions --
void enqueue(Queue *q, int accNo) {
 QueueNode *newNode = (QueueNode*)malloc(sizeof(QueueNode));
 newNode->accNo = accNo;
 newNode->next = NULL;
 if (q->rear == NULL)
 q->front = q->rear = newNode;
 else {
 q->rear->next = newNode;
 q->rear = newNode;
 }
 printf("Customer %d added to the queue.\n", accNo);
 }
 void dequeue(Queue *q) {
 if (q->front == NULL) {
 printf("Queue is empty.\n");
 return;
 }
 QueueNode* temp = q->front;
 printf("Serving customer with Account No: %d\n", temp->accNo);
 q->front = q->front->next;
 if (q->front == NULL) q->rear = NULL;
 free(temp);
 }
 void displayQueue(Queue q) {
 QueueNode* temp = q.front;
 printf("Customer Queue: ");
 while (temp != NULL) {
 printf("%d -> ", temp->accNo);
 temp = temp->next;
 }
 printf("NULL\n");
 }
 // --- BST Functions --
Account* insertBST(Account* root, Account* newAcc) {
 if (root == NULL) return newAcc;
 if (
 A
 N
 t
 N )
if (newAcc->accNo < root->accNo)
 root->left = insertBST(root->left, newAcc);
 else
 root->right = insertBST(root->right, newAcc);
 return root;
 }
 Account* searchBST(Account* root, int accNo) {
 if (root == NULL || root->accNo == accNo) return root;
 if (accNo < root->accNo)
 return searchBST(root->left, accNo);
 else
 return searchBST(root->right, accNo);
 }
 void displayInOrder(Account* root) {
 if (root != NULL) {
 displayInOrder(root->left);
 printf("AccNo: %d, Name: %s, Balance: %.2f\n", root->accNo, root->name, root->balance);
 displayInOrder(root->right);
 }
 }
 // --- Account Functions --
Account* addAccount(Account* listHead, Account** bstRoot) {
 Account* newAcc = (Account*)malloc(sizeof(Account));
 printf("Enter Account Number: ");
 scanf("%d", &newAcc->accNo);
 printf("Enter Name: ");
 scanf("%s", newAcc->name);
 printf("Enter Initial Balance: ");
 scanf("%f", &newAcc->balance);
 newAcc->left = newAcc->right = NULL;
 newAcc->next = NULL;
 // Add to Linked List
 if (listHead == NULL)
 listHead = newAcc;
 else {
 A
 t* t
 li tH d
Account* temp = listHead;
 while (temp->next != NULL)
 temp = temp->next;
 temp->next = newAcc;
 }
 // Add to BST
 *bstRoot = insertBST(*bstRoot, newAcc);
 printf("Account Created Successfully!\n");
 return listHead;
 }
 void deposit(Account* root, int accNo, float amount) {
 Account* acc = searchBST(root, accNo);
 if (acc != NULL) {
 acc->balance += amount;
 printf("Deposited %.2f. New Balance: %.2f\n", amount, acc->balance);
 } else {
 printf("Account not found.\n");
 }
 }
 void withdraw(Account* root, int accNo, float amount) {
 Account* acc = searchBST(root, accNo);
 if (acc != NULL) {
 if (acc->balance >= amount) {
 acc->balance -= amount;
 printf("Withdrew %.2f. New Balance: %.2f\n", amount, acc->balance);
 } else {
 printf("Insu cient balance.\n");
 }
 } else {
 printf("Account not found.\n");
 }
 }
 // --- Main Program --
int main() {
 A
 t *li tH d NULL
Account *listHead = NULL;
 Account *bstRoot = NULL;
 Queue customerQueue = {NULL, NULL};
 int choice, accNo;
 f
 loat amount;
 while (1) {
 printf("\n--- Banking System Menu ---\n");
 printf("1. Create Account\n");
 printf("2. Display All Accounts\n");
 printf("3. Deposit Money\n");
 printf("4. Withdraw Money\n");
 printf("5. Add Customer to Queue\n");
 printf("6. Serve Customer\n");
 printf("7. Display Customer Queue\n");
 printf("8. Exit\n");
 printf("Enter choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 listHead = addAccount(listHead, &bstRoot);
 break;
 case 2:
 displayInOrder(bstRoot);
 break;
 case 3:
 printf("Enter Account Number: ");
 scanf("%d", &accNo);
 printf("Enter Amount to Deposit: ");
 scanf("%f", &amount);
 deposit(bstRoot, accNo, amount);
 break;
 case 4:
 printf("Enter Account Number: ");
 scanf("%d", &accNo);
 printf("Enter Amount to Withdraw: ");
 scanf("%f", &amount);
 withdraw(bstRoot, accNo, amount);
 break;
 5
case 5:
 printf("Enter Account Number to Add to Queue: ");
 scanf("%d", &accNo);
 enqueue(&customerQueue, accNo);
 break;
 case 6:
 dequeue(&customerQueue);
 break;
 case 7:
 displayQueue(customerQueue);
 break;
 case 8:
 printf("Thank you for using the system.\n");
 exit(0);
 default:
 printf("Invalid choice.\n");
 }
 }
 return 0;
 }

